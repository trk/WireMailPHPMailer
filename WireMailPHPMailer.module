<?php

/**
 * Class WireMailPHPMailer
 *
 * This module extends WireMail base class, integrating the PHPMailer mailing library into ProcessWire.
 *
 * @author			: İskender TOTOĞLU, @ukyo (community), @trk (Github)
 * @website			: http://altivebir.com.tr
 * @projectWebsite	: https://github.com/trk/WireMailPHPMailer
 */
class WireMailPHPMailer extends WireMail implements Module, ConfigurableModule, WireMailInterface {

    /**
     * PHPMailer Version
     */
    const PHPMailer_VERSION = "5.2.21";

    /**
     * PHPMailer instance
     */
    protected $PHPMailer = null;

    public static function getModuleInfo() {
        return array(
            'title' => 'WireMailPHPMailer',
            'summary' => "This module extends WireMail base class, integrating the PHPMailer mailing library into ProcessWire.",
            'version' => 5,
            'author' => 'İskender TOTOĞLU | @ukyo(community), @trk (Github), http://altivebir.com.tr',
            'icon' => 'envelope-o',
            'href' => 'https://github.com/trk/WireMailPHPMailer'
        );
    }

    /**
     * Default configuration for this module
     *
     * @return array
     */
    static public function getDefaultData() {
        return array(
            /* @NOTE : Will Check Later !
            // Holds the most recent mailer error message.
            'ErrorInfo' => '',
            // The Sender email (Return-Path) of the message. If not empty, will be sent via -f to sendmail or as 'MAIL FROM' in smtp mode.
            'Sender' => '',
            // The Subject of the message.
            'Body' => '',
            // The plain-text message body.
            // This body can be read by mail clients that do not have HTML email
            // capability such as mutt & Eudora.
            // Clients that can read HTML will view the normal Body.
            'AltBody' => '',
            // An iCal message part body.
            // Only supported in simple alt or alt_inline message types
            // To generate iCal events, use the bundled extras/EasyPeasyICS.php class or iCalcreator
            // @link http://sprain.ch/blog/downloads/php-class-easypeasyics-create-ical-files-with-php/
            // @link http://kigkonsult.se/iCalcreator/
            'Ical' => '',
            // Word-wrap the message body to this number of chars.
            // Set to 0 to not wrap. A useful value here is 78, for RFC2822 section 2.1.1 compliance.
            'WordWrap' => '',
            // Whether mail() uses a fully sendmail-compatible MTA.
            // One which supports sendmail's "-oi -f" options.
            'UseSendmailOptions' => true,
            */

            // Email priority (1 = High, 3 = Normal, 5 = low)
            'Priority' => 3,
            // The character set of the message. PHPMailer default : iso-8859-1
            'CharSet' => 'utf-8',
            // The MIME Content-type of the message.
            'ContentType' => 'text/plain',
            // The message encoding. Options: "8bit", "7bit", "binary", "base64", and "quoted-printable".
            'Encoding' => '7bit',
            // The From email address for the message.
            'From' => 'root@localhost',
            // The From name of the message.
            'FromName' => 'Root User',
            // The To email address for the message.
            'To' => 'root@localhost',
            // The To name of the message.
            'ToName' => 'Root User',
            // The Subject of the message.
            'Subject' => '',
            // Which method to use to send mail.
            // Options: "mail", "sendmail", or "smtp".
            'Mailer' => 'smtp',
            // The path to the sendmail program.
            'Sendmail' => '/usr/sbin/sendmail',
            // Enable SMTP debugging
            // 0 = off (for production use)
            // 1 = client messages
            // 2 = client and server messages
            'SMTPDebug' => 0,
            // Ask for HTML-friendly debug output
            'Debugoutput' => 'html',
            // Helo
            // The SMTP HELO of the message.
            // Default is 'Hostname'. If 'Hostname' is empty,
            // PHPMailer attempts to find one with the same method described above for 'Hostname'.
            'Helo' => '',
            // Enable SSL encryption, `tls` also accepted
            'SMTPSecure' => 'ssl',
            // Whether to use SMTP authentication.
            // Uses the Username and Password properties.
            'SMTPAuth' => false,
            // SMTP auth type.
            // Options are LOGIN (default), PLAIN, NTLM, CRAM-MD5
            'AuthType' => 'LOGIN',
            // Whether to enable TLS encryption automatically if a server supports it, even if `SMTPSecure` is not set to 'tls'.
            // Be aware that in PHP >= 5.6 this requires that the server's certificates are valid.
            'SMTPAutoTLS' => true,
            // SMTP hosts
            // Either a single hostname or multiple semicolon-delimited hostnames.
            // You can also specify a different port
            // for each host by using this format: [hostname:port]
            // (e.g. "smtp1.example.com:25;smtp2.example.com").
            // You can also specify encryption type, for example:
            // (e.g. "tls://smtp1.example.com:587;ssl://smtp2.example.com:465").
            // Hosts will be tried in order.
            'Host' => 'localhost',
            // Set the SMTP port number - likely to be 25, 465 or 587
            'Port' => '465',
            // Username to use for SMTP authentication
            'Username' => "",
            // Password to use for SMTP authentication
            'Password' => "",

        );
    }

    /**
     * Populate the default config data
     */
    public function __construct() {
        foreach(self::getDefaultData() as $key => $value) {
            $this->$key = $value;
        }
    }

    /**
     * Initialize the module
     */
    public function init() {
        require_once(dirname(__FILE__) . "/phpmailer/PHPMailerAutoload.php");

        $this->PHPMailer = new PHPMailer;

        $this->PHPMailer->Priority = $this->Priority;
        $this->PHPMailer->CharSet = $this->CharSet;
        $this->PHPMailer->ContentType = $this->ContentType;
        $this->PHPMailer->Encoding = $this->Encoding;

        if($this->Mailer == 'smtp') {
            $this->PHPMailer->isSMTP();
            if($this->SMTPDebug != 0) {
                $this->PHPMailer->SMTPDebug = $this->SMTPDebug;
                $this->PHPMailer->Debugoutput = $this->Debugoutput;
            }
            if($this->Helo != "") $this->PHPMailer->Helo = $this->Helo;
            $this->PHPMailer->SMTPSecure = $this->SMTPSecure;
            $this->PHPMailer->SMTPAutoTLS = ($this->SMTPAutoTLS == 1) ? true : false;
            $this->PHPMailer->SMTPAuth = ($this->SMTPAuth == 1) ? true : false;
            $this->PHPMailer->AuthType = ($this->AuthType != "") ? $this->AuthType : "LOGIN";
            $this->PHPMailer->Host = $this->Host;
            $this->PHPMailer->Port = $this->Port;
            $this->PHPMailer->Username = $this->Username;
            $this->PHPMailer->Password = $this->Password;
        } elseif($this->Mailer == 'sendmail') {
            $this->PHPMailer->Sendmail = $this->Sendmail;
        }

        $this->PHPMailer->setFrom($this->From, $this->FromName);

        /* For Compare Default data with changed data
        $defaults = $this->getDefaultData();
        foreach($defaults as $key => $default) echo "<b>{$key} :: {$default} /=> ", $this->{$key}, "</b><br>";
         */
    }

    /**
     * The From email address for the message.
     *
     * @param string $From
     * @param null $Name
     * @return $this
     */
    /*
    public function From($From="", $Name=null) {
        if($From != "") $this->PHPMailer->From = $From;
        if(is_null($Name) && $Name != "") $this->FromName($Name);
        return $this;
    }
    */

    /**
     * The From name of the message.
     *
     * @var string
     * @return $this
     */
    /*
    public function FromName($FromName="") {
        if($FromName != "") $this->PHPMailer->FromName = $FromName;
        return $this;
    }
    */

    /**
     * The To email address for the message.
     *
     * @param string $To
     * @param null $Name
     * @return $this
     */
    /*
    public function To($To="", $Name=null) {
        if($To != "") $this->To = $To;
        if(is_null($Name) && $Name != "") $this->ToName($Name);
        return $this;
    }
    */

    /**
     * The To Name of the message.
     *
     * @var string
     * @return $this
     */
    /*
    public function ToName($ToName="") {
        if($ToName != "") $this->ToName = $ToName;
        return $this;
    }
    */

    /**
     * The plain-text message body.
     * This body can be read by mail clients that do not have HTML email capability such as mutt & Eudora.
     * Clients that can read HTML will view the normal Body.
     *
     * @param string $AltBody
     * @return $this
     */
    public function AltBody($AltBody="") {
        if($AltBody != "") $this->PHPMailer->AltBody = $AltBody;
        return $this;
    }

    /**
     * The Subject of the message.
     *
     * @var string
     * @return $this
     */
    public function addSubject($Subject="") {
        if($Subject != "") $this->PHPMailer->Subject = $Subject;
        return $this;
    }

    /**
     * An HTML or plain text message body.
     * If HTML then call isHTML(true).
     *
     * @param string $Body
     * @return $this
     */
    /*
    public function Body($Body="") {
        if($Body != "") $this->PHPMailer->Body = $Body;
        return $this;
    }
    */

    /**
     * Add a "To" address.
     *
     * @param string $address The email address to send to
     * @param string $name
     * @return boolean true on success, false if address already used or invalid in some way
     */
    public function addAddress($address, $name = '') {
        return $this->PHPMailer->addAddress($address, $name);
    }

    /**
     * Add a "CC" address.
     *
     * @note: This function works with the SMTP mailer on win32, not with the "mail" mailer.
     * @param string $address The email address to send to
     * @param string $name
     * @return boolean true on success, false if address already used or invalid in some way
     */
    public function addCC($address, $name = '') {
        return $this->PHPMailer->addCC($address, $name);
    }

    /**
     * Add a "BCC" address.
     *
     * @note: This function works with the SMTP mailer on win32, not with the "mail" mailer.
     * @param string $address The email address to send to
     * @param string $name
     * @return boolean true on success, false if address already used or invalid in some way
     */
    public function addBCC($address, $name = '') {
        return $this->PHPMailer->addBCC($address, $name);
    }

    /**
     * Add a "Reply-To" address.
     *
     * @param string $address The email address to reply to
     * @param string $name
     * @return boolean true on success, false if address already used or invalid in some way
     */
    public function addReplyTo($address, $name = '') {
        return $this->PHPMailer->addReplyTo($address, $name);
    }

    /**
     * Parse and validate a string containing one or more RFC822-style comma-separated email addresses
     * of the form "display name <address>" into an array of name/address pairs.
     * Uses the imap_rfc822_parse_adrlist function if the IMAP extension is available.
     * Note that quotes in the name part are removed.
     *
     * @param string $addrstr The address list string
     * @param bool $useimap Whether to use the IMAP extension to parse the list
     * @return array
     * @link http://www.andrew.cmu.edu/user/agreen1/testing/mrbs/web/Mail/RFC822.php A more careful implementation
     */
    public function parseAddresses($addrstr, $useimap = true) {
        return $this->PHPMailer->parseAddresses($addrstr, $useimap);
    }

    /**
     * Set the From and FromName properties.
     *
     * @param string $address
     * @param string $name
     * @param boolean $auto Whether to also set the Sender address, defaults to true
     * @throws phpmailerException
     * @return boolean
     */
    public function setFrom($address, $name = '', $auto = true) {
        return $this->PHPMailer->setFrom($address, $name, $auto);
    }

    /**
     * Return the Message-ID header of the last email.
     * Technically this is the value from the last time the headers were created,
     * but it's also the message ID of the last sent message except in
     * pathological cases.
     *
     * @return string
     */
    public function getLastMessageID() {
        return $this->PHPMailer->getLastMessageID();
    }

    /**
     * Create a message from an HTML string.
     * Automatically makes modifications for inline images and backgrounds
     * and creates a plain-text version by converting the HTML.
     * Overwrites any existing values in $this->Body and $this->AltBody
     *
     * @access public
     * @param string $message HTML message string
     * @param string $basedir baseline directory for path
     * @param boolean|callable $advanced Whether to use the internal HTML to text converter
     *    or your own custom converter @see PHPMailer::html2text()
     * @return string $message
     */
    public function msgHTML($message, $basedir = '', $advanced = false) {
        return $this->PHPMailer->msgHTML($message, $basedir, $advanced);
    }

    /**
     * Add an attachment from a path on the filesystem.
     * Returns false if the file could not be found or read.
     *
     * @param string $path Path to the attachment.
     * @param string $name Overrides the attachment name.
     * @param string $encoding File encoding (see $Encoding).
     * @param string $type File extension (MIME) type.
     * @param string $disposition Disposition to use
     * @throws phpmailerException
     * @return boolean
     */
    public function addAttachment($path, $name = '', $encoding = 'base64', $type = '', $disposition = 'attachment') {
        return $this->PHPMailer->addAttachment($path, $name, $encoding, $type, $disposition);
    }

    /**
     * Send email using PHPMailer send() function
     */
    public function ___send() {

        $toIsArray = false;
        if(is_array($this->to)) {
            foreach($this->to as $to) {
                $toIsArray = true;
                $this->PHPMailer->AddAddress($to);
            }
        }

        if($this->replyTo) $this->PHPMailer->AddReplyTo($this->replyTo);
        if($this->subject != "") $this->Subject = $this->subject;

        if($this->To != "" && $this->Subject != "") {
            if(!$toIsArray) $this->PHPMailer->addAddress($this->To, $this->ToName);
            $this->PHPMailer->Subject = $this->Subject;

            if($this->from != "") $this->PHPMailer->From = $this->from;
            if($this->fromName != "") $this->PHPMailer->FromName = $this->fromName;
            if($this->body != "") $this->PHPMailer->Body = $this->body;
            if($this->bodyHTML != "") $this->PHPMailer->msgHTML($this->bodyHTML);
        }

        if (!$this->PHPMailer->send()) $this->error(__("Mailer Error : ") . $this->PHPMailer->ErrorInfo, Notice::log);
    }

    /**
     * Module configuration
     *
     * @param array $data
     * @return InputfieldWrapper
     */
    static public function getModuleConfigInputfields(array $data) {

        /**
         * Presentation | How should this field be displayed in the editor?
         *** Options indicated with † may not work with all input types or placements, test to ensure compatibility.
         * 0 => Open
         * 9 => Open + Cannot be closed
         * 2 => Open when populated + Closed when blank
         * 11 => Open when populated + Closed when blank + Load only when opened (AJAX) †
         * 7 => Open when populated + Closed when blank + Locked (not editable)
         * 5 => Open when blank + Closed when populated
         * 1 => Closed
         * 8 => Closed + Locked (not editable)
         * 10 => Closed + Load only when opened (AJAX) †
         * 4 => Hidden (not shown in the editor)
         **/

        $fields = new InputfieldWrapper();
        $modules = wire('modules');

        $defaults = self::getDefaultData();
        $data = array_merge($defaults, $data);

        // From | The From email address for the message.
        $field = $modules->get("InputfieldText");
        $field->name = "From";
        $field->label = __("From");
        $field->description = __("The From email address for the message.");
        $field->required = true;
        if(isset($data[$field->name])) $field->value = $data[$field->name];
        $field->columnWidth = 50;
        $field->collapsed = 9; // Open + Cannot be closed
        $fields->add($field);

        // FromName | The From name of the message.
        $field = $modules->get("InputfieldText");
        $field->name = "FromName";
        $field->label = __("From Name");
        $field->description = __("The From name of the message.");
        $field->required = true;
        if (isset($data[$field->name])) $field->value = $data[$field->name];
        $field->columnWidth = 50;
        $field->collapsed = 9; // Open + Cannot be closed
        $fields->add($field);

        // To | The To email address for the message.
        $field = $modules->get("InputfieldText");
        $field->name = "To";
        $field->label = __("To");
        $field->description = __("The To email address for the message.");
        // $field->required = true;
        if(isset($data[$field->name])) $field->value = $data[$field->name];
        $field->columnWidth = 50;
        $field->collapsed = 9; // Open + Cannot be closed
        $fields->add($field);

        // ToName | The To name of the message.
        $field = $modules->get("InputfieldText");
        $field->name = "ToName";
        $field->label = __("To Name");
        $field->description = __("The To name of the message.");
        // $field->required = true;
        if (isset($data[$field->name])) $field->value = $data[$field->name];
        $field->columnWidth = 50;
        $field->collapsed = 9; // Open + Cannot be closed
        $fields->add($field);

        // Subject | The Subject of the message.
        $field = $modules->get("InputfieldText");
        $field->name = "Subject";
        $field->label = __("Subject");
        $field->description = __("The Subject of the message.");
        // $field->required = true;
        if (isset($data[$field->name])) $field->value = $data[$field->name];
        $field->columnWidth = 70;
        $field->collapsed = 9; // Open + Cannot be closed
        $fields->add($field);

        // Priority | Email priority (1 = High, 3 = Normal, 5 = low)
        $field = $modules->get("InputfieldSelect");
        $field->name = "Priority";
        $field->label = __("Priority");
        $field->notes = __("Email priority (1 = High, 3 = Normal, 5 = low)");
        $field->required = true;
        $field->addOptions(array(
            1 => 'High',
            3 => 'Normal',
            5 => 'Low'
        ));
        if (isset($data[$field->name])) $field->value = $data[$field->name];
        $field->columnWidth = 30;
        $field->collapsed = 9; // Open + Cannot be closed
        $fields->add($field);

        // Charset | The character set of the message.
        $field = $modules->get("InputfieldText");
        $field->name = "CharSet";
        $field->label = __("Charset");
        $field->notes = __("The character set of the message.");
        $field->required = true;
        if (isset($data[$field->name])) $field->value = $data[$field->name];
        $field->columnWidth = 33;
        $field->collapsed = 9; // Open + Cannot be closed
        $fields->add($field);

        // The MIME Content-type of the message.
        // Options: "text/plain", "text/html"
        $field = $modules->get("InputfieldSelect");
        $field->name = "ContentType";
        $field->label = __("Content Type");
        $field->notes = __("The MIME Content-type of the message.");
        $field->required = true;
        $field->addOptions(array(
            'text/plain' => 'text/plain',
            'text/html' => 'text/html'
        ));
        if (isset($data[$field->name])) $field->value = $data[$field->name];
        $field->columnWidth = 33;
        $field->collapsed = 9; // Open + Cannot be closed
        $fields->add($field);

        // The message encoding.
        // Options: "8bit", "7bit", "binary", "base64", and "quoted-printable".
        $field = $modules->get("InputfieldSelect");
        $field->name = "Encoding";
        $field->label = __("Encoding");
        $field->notes = __('The message encoding.');
        $field->required = true;
        $field->addOptions(array(
            '8bit' => '8bit',
            '7bit' => '7bit',
            'binary' => 'binary',
            'base64' => 'base64',
            'quoted-printable' => 'quoted-printable'
        ));
        if (isset($data[$field->name])) $field->value = $data[$field->name];
        $field->columnWidth = 34;
        $field->collapsed = 9; // Open + Cannot be closed
        $fields->add($field);

        // Mailer | Which method to use to send mail.
        // Options: "mail", "sendmail", or "smtp".
        $field = $modules->get("InputfieldSelect");
        $field->name = "Mailer";
        $field->label = __("Mailer");
        $field->description = __("Which method to use to send mail.");
        $field->notes = __('Options: "mail", "sendmail", or "smtp".');
        $field->required = true;
        $field->addOptions(array(
            'mail' => 'mail',
            'sendmail' => 'sendmail',
            'smtp' => 'smtp'
        ));
        if (isset($data[$field->name])) $field->value = $data[$field->name];
        $field->columnWidth = 33;
        $field->collapsed = 9; // Open + Cannot be closed
        $fields->add($field);

        // Enable SMTP debugging
        // 0 = off (for production use)
        // 1 = client messages
        // 2 = client and server messages
        $field = $modules->get("InputfieldSelect");
        $field->name = "SMTPDebug";
        $field->label = __("SMTP Debug");
        $field->description = __("Enable SMTP debugging");
        $field->addOptions(array(
            0 => 'Off',
            1 => 'Client messages',
            2 => 'Client and server messages'
        ));
        if (isset($data[$field->name])) $field->value = $data[$field->name];
        $field->showIf = "Mailer=smtp";
        $field->columnWidth = 33;
        $field->collapsed = 9; // Open + Cannot be closed
        $fields->add($field);

        // Debugoutput
        // How to handle debug output.
        // Options:
        // * `echo` Output plain-text as-is, appropriate for CLI
        // * `html` Output escaped, line breaks converted to `<br>`, appropriate for browser output
        // * `error_log` Output to error log as configured in php.ini
        $field = $modules->get("InputfieldSelect");
        $field->name = "Debugoutput";
        $field->label = __("Debug Output");
        $field->description = __("How to handle debug output.");
        $field->notes = __("'echo' Output plain-text as-is, appropriate for CLI
                            'html' Output escaped, line breaks converted to `<br>`, appropriate for browser output
                            'error_log' Output to error log as configured in php.ini");
        $field->addOptions(array(
            'echo' => 'echo',
            'html' => 'html',
            'error_log' => 'error_log'
        ));
        if (isset($data[$field->name])) $field->value = $data[$field->name];
        $field->showIf = "SMTPDebug!=0";
        $field->columnWidth = 34;
        $fields->add($field);

        // If Mailer=smtp show fieldset
        $fieldset = $modules->get("InputfieldFieldset");
        $fieldset->showIf = "Mailer=smtp";
        $fieldset->label = __("SMTP Transport Settings");
        $fieldset->collapsed = 9; // Open + Cannot be closed
        $fields->add($fieldset);

        // Helo
        // The SMTP HELO of the message.
        // Default is 'Hostname'. If 'Hostname' is empty,
        // PHPMailer attempts to find one with the same method described above for 'Hostname'.
        $field = $modules->get("InputfieldText");
        $field->name = "Helo";
        $field->label = __("Helo");
        $field->description = __("The SMTP HELO of the message.");
        $field->notes = __("Default is 'Hostname'. If 'Hostname' is empty,
                            PHPMailer attempts to find one with the same method described above for 'Hostname'.");
        $field->requiredIf = "Mailer=smtp";
        if (isset($data[$field->name])) $field->value = $data[$field->name];
        // $field->columnWidth = 100;
        $field->collapsed = 9; // Open + Cannot be closed
        $fieldset->add($field);

        // SMTPSecure | Enable encryption, 'ssl' or 'tls' accepted
        $field = $modules->get("InputfieldSelect");
        $field->name = "SMTPSecure";
        $field->label = __("Encryption Type");
        $field->description = __("Enable encryption, 'ssl' or 'tls' accepted");
        $field->addOptions(array(
            '' => __('None'),
            'ssl' => 'SSL',
            'tls' => 'TLS',
        ));
        if (isset($data[$field->name])) $field->value = $data[$field->name];
        $field->columnWidth = 50;
        $field->collapsed = 9; // Open + Cannot be closed
        $fieldset->add($field);

        // Whether to enable TLS encryption automatically if a server supports it, even if `SMTPSecure` is not set to 'tls'.
        // Be aware that in PHP >= 5.6 this requires that the server's certificates are valid.
        $field = $modules->get('InputfieldCheckbox');
        $field->attr('name', 'SMTPAutoTLS');
        $field->attr('value', 1);
        $field->attr('checked', $data['SMTPAutoTLS'] ? 'checked' : '');
        $field->label = " " . __("SMTP Auto TLS");
        $field->description = __("Whether to enable TLS encryption automatically if a server supports it, even if `SMTPSecure` is not set to 'tls'.");
        $field->notes = __("Be aware that in PHP >= 5.6 this requires that the server's certificates are valid.");
        $field->columnWidth = 50;
        $field->collapsed = 9; // Open + Cannot be closed
        $fieldset->add($field);


        // Whether to use SMTP authentication.
        // Uses the Username and Password properties.
        $field = $modules->get('InputfieldCheckbox');
        $field->attr('name', 'SMTPAuth');
        $field->attr('value', 1);
        $field->attr('checked', $data['SMTPAuth'] ? 'checked' : '');
        $field->label = " " . __("SMTP authentication");
        $field->description = __("Uses the Username and Password properties.");
        $field->columnWidth = 50;
        $field->collapsed = 9; // Open + Cannot be closed
        $fieldset->add($field);

        // SMTP auth type.
        // Options are LOGIN (default), PLAIN, NTLM, CRAM-MD5
        $field = $modules->get("InputfieldSelect");
        $field->showIf = "SMTPAuth=1";
        $field->name = "AuthType";
        $field->label = __("SMTP auth type");
        $field->notes = __("Options are LOGIN (default), PLAIN, NTLM, CRAM-MD5");
        $field->addOptions(array(
            'LOGIN' => 'LOGIN',
            'PLAIN' => 'PLAIN',
            'NTLM' => 'NTLM',
            'CRAM-MD5' => 'CRAM-MD5'
        ));
        if (isset($data[$field->name])) $field->value = $data[$field->name];
        // $field->columnWidth = 50;
        $field->collapsed = 9; // Open + Cannot be closed
        $fieldset->add($field);

        // SMTP hosts
        // Either a single hostname or multiple semicolon-delimited hostnames.
        // You can also specify a different port
        // for each host by using this format: [hostname:port]
        // (e.g. "smtp1.example.com:25;smtp2.example.com").
        // You can also specify encryption type, for example:
        // (e.g. "tls://smtp1.example.com:587;ssl://smtp2.example.com:465").
        // Hosts will be tried in order.
        $field = $modules->get("InputfieldText");
        $field->name = "Host";
        $field->label = __("SMTP Hosts");
        $field->description = __('Either a single hostname or multiple semicolon-delimited hostnames.');
        $field->notes = __('You can also specify a different port for each host by using this format: [hostname:port]
                            (e.g. "smtp1.example.com:25;smtp2.example.com").
                            You can also specify encryption type, for example:
                            (e.g. "tls://smtp1.example.com:587;ssl://smtp2.example.com:465").
                            Hosts will be tried in order.');
        $field->required = true;
        $field->requiredIf = "Mailer=smtp";
        if (isset($data[$field->name])) $field->value = $data[$field->name];
        $field->columnWidth = 50;
        $field->collapsed = 9; // Open + Cannot be closed
        $fieldset->add($field);

        // Port | Set the SMTP port number - likely to be 25, 465 or 587
        $field = $modules->get("InputfieldText");
        $field->name = "Port";
        $field->label = __("Port");
        $field->notes = __("Set the SMTP port number - likely to be 25, 465 or 587");
        $field->required = true;
        $field->requiredIf = "Mailer=smtp";
        if (isset($data[$field->name])) $field->value = $data[$field->name];
        $field->columnWidth = 50;
        $field->collapsed = 9; // Open + Cannot be closed
        $fieldset->add($field);

        // Username | Username to use for SMTP authentication
        $field = $modules->get("InputfieldText");
        $field->name = "Username";
        $field->label = __("Username");
        $field->description = __("Username to use for SMTP authentication");
        $field->required = true;
        $field->requiredIf = "Mailer=smtp";
        if (isset($data[$field->name])) $field->value = $data[$field->name];
        $field->columnWidth = 50;
        $field->collapsed = 9; // Open + Cannot be closed
        $fieldset->add($field);

        // Password | Password to use for SMTP authentication
        $field = $modules->get("InputfieldText");
        $field->type = "password";
        $field->name = "Password";
        $field->label = __("Password");
        $field->description = __("Password to use for SMTP authentication");
        $field->notes = __("Note: password is stored as plain text in database.");
        $field->required = true;
        $field->requiredIf = "Mailer=smtp";
        if (isset($data[$field->name])) $field->value = $data[$field->name];
        $field->columnWidth = 50;
        $field->collapsed = 9; // Open + Cannot be closed
        $fieldset->add($field);

        // Sendmail | The path to the sendmail program.
        $field = $modules->get("InputfieldText");
        $field->showIf = "Mailer=sendmail";
        $field->name = "Sendmail";
        $field->label = __("Sendmail path");
        $field->notes = __("The path to the sendmail program.");
        if (isset($data[$field->name])) $field->value = $data[$field->name];
        $field->collapsed = 9; // Open + Cannot be closed
        $fields->add($field);

        return $fields;
    }
}